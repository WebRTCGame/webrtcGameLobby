{"ts":1372102690169,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"#!/usr/bin/env node\n\nvar optimist = require('optimist')\n    .usage('Precompile handlebar templates.\\nUsage: $0 template...', {\n      'f': {\n        'type': 'string',\n        'description': 'Output File',\n        'alias': 'output'\n      },\n      'a': {\n        'type': 'boolean',\n        'description': 'Exports amd style (require.js)',\n        'alias': 'amd'\n      },\n      'c': {\n        'type': 'string',\n        'description': 'Exports CommonJS style, path to Handlebars module',\n        'alias': 'commonjs',\n        'default': null\n      },\n      'h': {\n        'type': 'string',\n        'description': 'Path to handlebar.js (only valid for amd-style)',\n        'alias': 'handlebarPath',\n\t\t    'default': ''\n      },\n      'k': {\n        'type': 'string',\n        'description': 'Known helpers',\n        'alias': 'known'\n      },\n      'o': {\n        'type': 'boolean',\n        'description': 'Known helpers only',\n        'alias': 'knownOnly'\n      },\n      'm': {\n        'type': 'boolean',\n        'description': 'Minimize output',\n        'alias': 'min'\n      },\n      'n': {\n        'type': 'string',\n        'description': 'Template namespace',\n        'alias': 'namespace',\n        'default': 'Handlebars.templates'\n      },\n      's': {\n        'type': 'boolean',\n        'description': 'Output template function only.',\n        'alias': 'simple'\n      },\n      'r': {\n        'type': 'string',\n        'description': 'Template root. Base value that will be stripped from template names.',\n        'alias': 'root'\n      },\n      'p' : {\n        'type': 'boolean',\n        'description': 'Compiling a partial template',\n        'alias': 'partial'\n      },\n      'd' : {\n        'type': 'boolean',\n        'description': 'Include data when compiling',\n        'alias': 'data'\n      },\n      'e': {\n        'type': 'string',\n        'description': 'Template extension.',\n        'alias': 'extension',\n        'default': 'handlebars'\n      }\n    })\n\n    .check(function(argv) {\n      var template = [0];\n      if (!argv._.length) {\n        throw 'Must define at least one template or directory.';\n      }\n\n      argv._.forEach(function(template) {\n        try {\n          fs.statSync(template);\n        } catch (err) {\n          throw 'Unable to open template file \"' + template + '\"';\n        }\n      });\n    })\n    .check(function(argv) {\n      if (argv.simple && argv.min) {\n        throw 'Unable to minimze simple output';\n      }\n      if (argv.simple && (argv._.length !== 1 || fs.statSync(argv._[0]).isDirectory())) {\n        throw 'Unable to output multiple templates in simple mode';\n      }\n    });\n\nvar fs = require('fs'),\n    handlebars = require('../lib/handlebars'),\n    basename = require('path').basename,\n    uglify = require('uglify-js');\n\nvar argv = optimist.argv,\n    template = argv._[0];\n\n// Convert the known list into a hash\nvar known = {};\nif (argv.known && !Array.isArray(argv.known)) {\n  argv.known = [argv.known];\n}\nif (argv.known) {\n  for (var i = 0, len = argv.known.length; i < len; i++) {\n    known[argv.known[i]] = true;\n  }\n}\n\n// Build file extension pattern\nvar extension = argv.extension.replace(/[\\\\^$*+?.():=!|{}\\-\\[\\]]/g, function(arg) { return '\\\\' + arg; });\nextension = new RegExp('\\\\.' + extension + '$');\n\nvar output = [];\nif (!argv.simple) {\n  if (argv.amd) {\n    output.push('define([\\'' + argv.handlebarPath + 'handlebars\\'], function(Handlebars) {\\n');\n  } else if (argv.commonjs) {\n    output.push('var Handlebars = require(\"' + argv.commonjs + '\");');\n  } else {\n    output.push('(function() {\\n');\n  }\n  output.push('  var template = Handlebars.template, templates = ');\n  output.push(argv.namespace);\n  output.push(' = ');\n  output.push(argv.namespace);\n  output.push(' || {};\\n');\n}\nfunction processTemplate(template, root) {\n  var path = template,\n      stat = fs.statSync(path);\n  if (stat.isDirectory()) {\n    fs.readdirSync(template).map(function(file) {\n      var path = template + '/' + file;\n\n      if (extension.test(path) || fs.statSync(path).isDirectory()) {\n        processTemplate(path, root || template);\n      }\n    });\n  } else {\n    var data = fs.readFileSync(path, 'utf8');\n\n    var options = {\n      knownHelpers: known,\n      knownHelpersOnly: argv.o\n    };\n\n    if (argv.data) {\n      options.data = true;\n    }\n\n    // Clean the template name\n    if (!root) {\n      template = basename(template);\n    } else if (template.indexOf(root) === 0) {\n      template = template.substring(root.length+1);\n    }\n    template = template.replace(extension, '');\n\n    if (argv.simple) {\n      output.push(handlebars.precompile(data, options) + '\\n');\n    } else if (argv.partial) {\n      if(argv.amd && (argv._.length == 1 && !fs.statSync(argv._[0]).isDirectory())) {\n        output.push('return ');\n      }\n      output.push('Handlebars.partials[\\'' + template + '\\'] = template(' + handlebars.precompile(data, options) + ');\\n');\n    } else {\n      if(argv.amd && (argv._.length == 1 && !fs.statSync(argv._[0]).isDirectory())) {\n        output.push('return ');\n      }\n      output.push('templates[\\'' + template + '\\'] = template(' + handlebars.precompile(data, options) + ');\\n');\n    }\n  }\n}\n\nargv._.forEach(function(template) {\n  processTemplate(template, argv.root);\n});\n\n// Output the content\nif (!argv.simple) {\n  if (argv.amd) {\n    if(argv._.length > 1 || (argv._.length == 1 && fs.statSync(argv._[0]).isDirectory())) {\n      if(argv.partial){\n        output.push('return Handlebars.partials;\\n');\n      } else {\n        output.push('return templates;\\n');\n      }\n    }\n    output.push('});');\n  } else if (!argv.commonjs) {\n    output.push('})();');\n  }\n}\noutput = output.join('');\n\nif (argv.min) {\n  output = uglify.minify(output, {fromString: true}).code;\n}\n\nif (argv.output) {\n  fs.writeFileSync(argv.output, output, 'utf8');\n} else {\n  console.log(output);\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":5845}]],"length":5845}
