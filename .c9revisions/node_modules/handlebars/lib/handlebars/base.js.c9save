{"ts":1372128492166,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*jshint eqnull: true */\n\nmodule.exports.create = function() {\n\nvar Handlebars = {};\n\n// BEGIN(BROWSER)\n\nHandlebars.VERSION = \"1.0.0\";\nHandlebars.COMPILER_REVISION = 4;\n\nHandlebars.REVISION_CHANGES = {\n  1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it\n  2: '== 1.0.0-rc.3',\n  3: '== 1.0.0-rc.4',\n  4: '>= 1.0.0'\n};\n\nHandlebars.helpers  = {};\nHandlebars.partials = {};\n\nvar toString = Object.prototype.toString,\n    functionType = '[object Function]',\n    objectType = '[object Object]';\n\nHandlebars.registerHelper = function(name, fn, inverse) {\n  if (toString.call(name) === objectType) {\n    if (inverse || fn) { throw new Handlebars.Exception('Arg not supported with multiple helpers'); }\n    Handlebars.Utils.extend(this.helpers, name);\n  } else {\n    if (inverse) { fn.not = inverse; }\n    this.helpers[name] = fn;\n  }\n};\n\nHandlebars.registerPartial = function(name, str) {\n  if (toString.call(name) === objectType) {\n    Handlebars.Utils.extend(this.partials,  name);\n  } else {\n    this.partials[name] = str;\n  }\n};\n\nHandlebars.registerHelper('helperMissing', function(arg) {\n  if(arguments.length === 2) {\n    return undefined;\n  } else {\n    throw new Error(\"Missing helper: '\" + arg + \"'\");\n  }\n});\n\nHandlebars.registerHelper('blockHelperMissing', function(context, options) {\n  var inverse = options.inverse || function() {}, fn = options.fn;\n\n  var type = toString.call(context);\n\n  if(type === functionType) { context = context.call(this); }\n\n  if(context === true) {\n    return fn(this);\n  } else if(context === false || context == null) {\n    return inverse(this);\n  } else if(type === \"[object Array]\") {\n    if(context.length > 0) {\n      return Handlebars.helpers.each(context, options);\n    } else {\n      return inverse(this);\n    }\n  } else {\n    return fn(context);\n  }\n});\n\nHandlebars.K = function() {};\n\nHandlebars.createFrame = Object.create || function(object) {\n  Handlebars.K.prototype = object;\n  var obj = new Handlebars.K();\n  Handlebars.K.prototype = null;\n  return obj;\n};\n\nHandlebars.logger = {\n  DEBUG: 0, INFO: 1, WARN: 2, ERROR: 3, level: 3,\n\n  methodMap: {0: 'debug', 1: 'info', 2: 'warn', 3: 'error'},\n\n  // can be overridden in the host environment\n  log: function(level, obj) {\n    if (Handlebars.logger.level <= level) {\n      var method = Handlebars.logger.methodMap[level];\n      if (typeof console !== 'undefined' && console[method]) {\n        console[method].call(console, obj);\n      }\n    }\n  }\n};\n\nHandlebars.log = function(level, obj) { Handlebars.logger.log(level, obj); };\n\nHandlebars.registerHelper('each', function(context, options) {\n  var fn = options.fn, inverse = options.inverse;\n  var i = 0, ret = \"\", data;\n\n  var type = toString.call(context);\n  if(type === functionType) { context = context.call(this); }\n\n  if (options.data) {\n    data = Handlebars.createFrame(options.data);\n  }\n\n  if(context && typeof context === 'object') {\n    if(context instanceof Array){\n      for(var j = context.length; i<j; i++) {\n        if (data) { data.index = i; }\n        ret = ret + fn(context[i], { data: data });\n      }\n    } else {\n      for(var key in context) {\n        if(context.hasOwnProperty(key)) {\n          if(data) { data.key = key; }\n          ret = ret + fn(context[key], {data: data});\n          i++;\n        }\n      }\n    }\n  }\n\n  if(i === 0){\n    ret = inverse(this);\n  }\n\n  return ret;\n});\n\nHandlebars.registerHelper('if', function(conditional, options) {\n  var type = toString.call(conditional);\n  if(type === functionType) { conditional = conditional.call(this); }\n\n  if(!conditional || Handlebars.Utils.isEmpty(conditional)) {\n    return options.inverse(this);\n  } else {\n    return options.fn(this);\n  }\n});\n\nHandlebars.registerHelper('unless', function(conditional, options) {\n  return Handlebars.helpers['if'].call(this, conditional, {fn: options.inverse, inverse: options.fn});\n});\n\nHandlebars.registerHelper('with', function(context, options) {\n  var type = toString.call(context);\n  if(type === functionType) { context = context.call(this); }\n\n  if (!Handlebars.Utils.isEmpty(context)) return options.fn(context);\n});\n\nHandlebars.registerHelper('log', function(context, options) {\n  var level = options.data && options.data.level != null ? parseInt(options.data.level, 10) : 1;\n  Handlebars.log(level, context);\n});\n\n// END(BROWSER)\n\nreturn Handlebars;\n};\n"]],"start1":0,"start2":0,"length1":0,"length2":4353}]],"length":4353}
