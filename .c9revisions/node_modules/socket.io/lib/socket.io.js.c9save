{"ts":1371822815108,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\n/*!\n * socket.io-node\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar client = require('socket.io-client');\n\n/**\n * Version.\n */\n\nexports.version = '0.9.16';\n\n/**\n * Supported protocol version.\n */\n\nexports.protocol = 1;\n\n/**\n * Client that we serve.\n */\n\nexports.clientVersion = client.version;\n\n/**\n * Attaches a manager\n *\n * @param {HTTPServer/Number} a HTTP/S server or a port number to listen on.\n * @param {Object} opts to be passed to Manager and/or http server\n * @param {Function} callback if a port is supplied\n * @api public\n */\n\nexports.listen = function (server, options, fn) {\n  if ('function' == typeof server) {\n    console.warn('Socket.IO\\'s `listen()` method expects an `http.Server` instance\\n'\n    + 'as its first parameter. Are you migrating from Express 2.x to 3.x?\\n'\n    + 'If so, check out the \"Socket.IO compatibility\" section at:\\n'\n    + 'https://github.com/visionmedia/express/wiki/Migrating-from-2.x-to-3.x');\n  }\n\n  if ('function' == typeof options) {\n    fn = options;\n    options = {};\n  }\n\n  if ('undefined' == typeof server) {\n    // create a server that listens on port 80\n    server = 80;\n  }\n\n  if ('number' == typeof server) {\n    // if a port number is passed\n    var port = server;\n\n    if (options && options.key)\n      server = require('https').createServer(options);\n    else\n      server = require('http').createServer();\n\n    // default response\n    server.on('request', function (req, res) {\n      res.writeHead(200);\n      res.end('Welcome to socket.io.');\n    });\n\n    server.listen(port, fn);\n  }\n\n  // otherwise assume a http/s server\n  return new exports.Manager(server, options);\n};\n\n/**\n * Manager constructor.\n *\n * @api public\n */\n\nexports.Manager = require('./manager');\n\n/**\n * Transport constructor.\n *\n * @api public\n */\n\nexports.Transport = require('./transport');\n\n/**\n * Socket constructor.\n *\n * @api public\n */\n\nexports.Socket = require('./socket');\n\n/**\n * Static constructor.\n *\n * @api public\n */\n\nexports.Static = require('./static');\n\n/**\n * Store constructor.\n *\n * @api public\n */\n\nexports.Store = require('./store');\n\n/**\n * Memory Store constructor.\n *\n * @api public\n */\n\nexports.MemoryStore = require('./stores/memory');\n\n/**\n * Redis Store constructor.\n *\n * @api public\n */\n\nexports.RedisStore = require('./stores/redis');\n\n/**\n * Parser.\n *\n * @api public\n */\n\nexports.parser = require('./parser');\n"]],"start1":0,"start2":0,"length1":0,"length2":2443}]],"length":2443}
