{"ts":1371821624755,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\n\n\n/*\n// reference the http module so we can create a webserver\nvar http = require(\"http\");\n\n// create a server\nhttp.createServer(function(req, res) {\n    // on every request, we'll output 'Hello world'\n    res.end(\"Hello world from Cloud9!\");\n}).listen(process.env.PORT, process.env.IP);\n\n// Note: when spawning a server on Cloud9 IDE, \n// listen on the process.env.PORT and process.env.IP environment variables\n\n// Click the 'Run' button at the top to start your server,\n// then click the URL that is emitted to the Output tab of the console\n//Important: use 'process.env.PORT' as the port and 'process.env.IP' as the host in your scripts!\n*/\n/*\n    Keep a global list of currently connected clients\n    -----------------------------------------------\n*/\nvar clients = [];\n\n\n\n/*\n    Create an http server to serve the client.html file\n    ---------------------------------------------------\n*/\nvar http = require(\"http\");\nvar fs = require(\"fs\");\nvar httpServer = http.createServer(function(request, response) {\n    fs.readFile(__dirname + \"/index.html\", \"utf8\", function(error, content) {\n        response.writeHeader(200, {\"Content-Type\": \"text/html\"});\n        response.end(content);\n    });\n}).listen(process.env.PORT || 1337);\n\n\n/*\n    Listen for and handle socket.io connections\n    -------------------------------------------\n*/\nvar io = require(\"socket.io\").listen(httpServer);\nio.sockets.on(\"connection\", function(socket) {\n\n\n    /*\n        Handle requests to join the chat-room\n        -------------------------------------\n    */\n    socket.on('join', function(nick, callback) {\n\n        // If the nickname isn't in use, join the user\n        if (clients.indexOf(nick) < 0) {\n\n            // Store the nickname, we'll use it when sending messages\n            socket.nick = nick;\n\n            // Add the nickname to the global list\n            clients.push(nick);\n\n            // Send a message to all clients that a new user has joined\n            socket.broadcast.emit(\"user-joined\", nick);\n\n            // Callback to the user with a successful flag and the list of clients\n            callback(true, clients);\n\n        // If the nickname is already in use, reject the request to join\n        } else {\n            callback(false);\n        }\n    });\n\n    \n    /*\n        Handle chat messages\n        --------------------\n    */\n    socket.on(\"chat\", function(message) {\n        // Check that the client has already joined successfully,\n        // and that the message isn't just an empty string,\n        // then foward the message to all clients\n        if (socket.nick && message) {\n            io.sockets.emit(\"chat\", {sender: socket.nick, message: message});\n        }\n    });\n\n\n    /*\n        Handle client disconnection\n        ---------------------------\n    */\n    socket.on(\"disconnect\", function() {\n        // Check that the user has already joined successfully\n        if (socket.nick) {\n            // Remove the client from the global list\n            clients.splice(clients.indexOf(socket.nick), 1);\n            // Let all the remaining clients know of the disconnect\n            io.sockets.emit(\"user-left\", socket.nick);\n        }\n    });\n\n});"]],"start1":0,"start2":0,"length1":0,"length2":3172}]],"length":3172}
{"contributors":[],"silentsave":false,"ts":1371822697574,"patch":[[{"diffs":[[0," [];\n\n\n\n"],[1,"\n"],[0,"/*\n    C"]],"start1":770,"start2":770,"length1":16,"length2":17}]],"length":3173,"saved":false}
{"ts":1371822713486,"patch":[[{"diffs":[[0,"\n"],[1,"//github test"],[0,"\n\n/*\n// refe"]],"start1":0,"start2":0,"length1":13,"length2":26}]],"length":3186,"saved":false}
{"contributors":[],"silentsave":false,"ts":1372172807078,"patch":[[{"diffs":[[0,"var "],[-1,"clients = [];\n"],[1,"User = function User(nick){\nObject.call(this,nick);\nthis.nick = nick;\nthis.guid = this.generateGUID();\nvar _hosting = false;\nObject.defineProperty(this, \"hosting\", {\n    get: function() {\n      return _hosting;\n    },\n    set: function(value) {\n        console.log(\"hosting: \" + value);\n      this._hosting = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\nvar _clientOf = false;\nObject.defineProperty(this, \"clientOf\", {\n    get: function() {\n      return _clientOf;\n    },\n    set: function(value) {\n        console.log(\"ClientOf: \" + value);\n      this._clientOf = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  \n};\n\nUser.prototype = Object.create(Object.prototype);\nUser.prototype.generateGUID = function generateGUID(){\n    \n    var s4 = function s4() {\n    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n    };\n\nfunction guid() {\n    return s4() + s4() + '-' + s4() + '-' + s4() + '-' +\n        s4() + '-' + s4() + s4() + s4();\n};\n\nreturn guid();\n\n};\nUser.prototype.host = function host(){\n    if (!this.hosting){\n        this.hosting = true;\n    }\n};\nUser.prototype.join = function join(clientGuid){\n    if (!this.hosting){\n        this.clientOf = clientGuid;\n    }\n};\nUser.prototype.endClient = function endClient(){};\nUser.prototype.generateClientURL = function generateClientURL(){\n  return \"?mode=client&guid=\" + this.clientOf + \"&username=\" + this.nick;\n};\nUser.prototype.generateHostURL = function generateHostURL(){\n  return \"?mode=host&guid=\" + this.guid + \"&username=\" + this.nick;\n};\nUser.prototype.regenerateGuid = function regnerateGuid(){\n    this.guid = this.generateGUID();\n};\n\n\n//var clients = [];\nvar userlist = [];"],[0,"\n\n\n\n"]],"start1":770,"start2":770,"length1":22,"length2":1713},{"diffs":[[0,"var "],[-1,"fs = require(\"fs\");"],[1,"connect = require('connect');\n//var fs = require(\"fs\");\n//var handlebars = require(\"handlebars\");\n//var url = require('url');\n/*"],[0,"\nvar"]],"start1":2629,"start2":2629,"length1":27,"length2":136},{"diffs":[[0," 1337);\n"],[-1,"\n"],[1,"*/\nvar httpServer = connect.createServer(connect.static(__dirname)).listen(process.env.PORT);"],[0,"\n/*\n    "]],"start1":3039,"start2":3039,"length1":17,"length2":109},{"diffs":[[0,"user\n       "],[-1,""],[0,""],[1,"//"],[0," if (clients"]],"start1":3548,"start2":3548,"length1":24,"length2":26},{"diffs":[[0,"            "],[1,"//"],[0,"socket.nick "]],"start1":3667,"start2":3667,"length1":24,"length2":26},{"diffs":[[0,"= nick;\n"],[1,"            socket.user = new User(nick);\nconsole.log(JSON.stringify(socket.user));"],[0,"\n       "]],"start1":3693,"start2":3693,"length1":16,"length2":99},{"diffs":[[0,"ist\n            "],[1,"//"],[0,"clients.push(nic"]],"start1":3832,"start2":3832,"length1":32,"length2":34},{"diffs":[[0,"push(nick);\n"],[1,"            userlist.push(socket.user);"],[0,"\n           "]],"start1":3858,"start2":3858,"length1":24,"length2":63},{"diffs":[[0,"oined\", "],[-1,"nick"],[1,"socket.user"],[0,");\n\n    "]],"start1":4023,"start2":4023,"length1":20,"length2":27},{"diffs":[[0,"list of clients\n"],[1,"            \n"],[0,"            call"]],"start1":4113,"start2":4113,"length1":32,"length2":45},{"diffs":[[0,"ue, "],[-1,"clients"],[1,"userlist);\nio.sockets.emit('updateusers',userlist"],[0,");\n"],[-1,"\n"],[0,"    "]],"start1":4165,"start2":4165,"length1":19,"length2":60},{"diffs":[[0,"\n       "],[1,"//"],[0," } else "]],"start1":4293,"start2":4293,"length1":16,"length2":18},{"diffs":[[0,"e {\n            "],[1,"//"],[0,"callback(false);"]],"start1":4309,"start2":4309,"length1":32,"length2":34},{"diffs":[[0,"false);\n        "],[1,"//"],[0,"}\n    });\n\n    \n"]],"start1":4336,"start2":4336,"length1":32,"length2":34},{"diffs":[[0," if (socket."],[1,"user."],[0,"nick && mess"]],"start1":4667,"start2":4667,"length1":24,"length2":29},{"diffs":[[0,"der: socket."],[1,"user."],[0,"nick, messag"]],"start1":4743,"start2":4743,"length1":24,"length2":29},{"diffs":[[0," if (socket."],[-1,""],[0,""],[1,"user."],[0,"nick) {\n    "]],"start1":5003,"start2":5003,"length1":24,"length2":29},{"diffs":[[0,"        "],[1,"//"],[0,"clients."]],"start1":5086,"start2":5086,"length1":16,"length2":18},{"diffs":[[0,".nick), 1);\n"],[1,"            userlist.splice(userlist.indexOf(socket.user),1);\n            \n"],[0,"            "]],"start1":5133,"start2":5133,"length1":24,"length2":99},{"diffs":[[0,"connect\n"],[1,"            io.sockets.emit('updateusers',userlist);\n"],[0,"        "]],"start1":5280,"start2":5280,"length1":16,"length2":69},{"diffs":[[0," socket."],[-1,"nick"],[1,"user"],[0,");\n     "]],"start1":5381,"start2":5381,"length1":20,"length2":20}]],"length":5418,"saved":false}
