{"ts":1374624439537,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"function s4() {\r\n    return Math.floor((1 + Math.random()) * 0x10000)\r\n        .toString(16)\r\n        .substring(1);\r\n};\r\n\r\nfunction guid() {\r\n    return s4() + s4() + '-' + s4() + '-' + s4() + '-' +\r\n        s4() + '-' + s4() + s4() + s4();\r\n}\r\n\r\nvar Emitter = function() {\r\n    this.channels = {};\r\n};\r\n\r\nEmitter.prototype.fire = function(channel) {\r\n    var subscribers = this.channels[channel];\r\n    if (!subscribers) {\r\n        return;\r\n    }\r\n    var args = [];\r\n    for (var i = 1; i < arguments.length; i++) {\r\n        args.push(arguments[i]);\r\n    }\r\n    for (i = 0; i < subscribers.length; i++) {\r\n        subscribers[i].apply(null, args);\r\n    }\r\n};\r\n\r\nEmitter.prototype.pipe = function(sourceEmitter, channel) {\r\n    var _this = this;\r\n    sourceEmitter.on(channel, function() {\r\n        var args = [channel];\r\n        for (var i = 0; i < arguments.length; i++) {\r\n            args.push(arguments[i]);\r\n        }\r\n\r\n        _this.fire.apply(_this, args);\r\n    })\r\n};\r\n\r\nEmitter.prototype.on = function(channel, func) {\r\n    var subscribers = this.channels[channel];\r\n    if (!subscribers) {\r\n        subscribers = [];\r\n        this.channels[channel] = subscribers;\r\n    }\r\n\r\n    subscribers.push(func);\r\n};\r\n\r\nvar App = function(key,iguid) {\r\n    console.log(\"new app: \" + iguid);\r\n    Emitter.call(this);\r\n    var _this = this;\r\n    this.guid = iguid || guid();\r\n    this.key = key;\r\n    this.mux = new Mux({\r\n        maxSize: 1000\r\n    });\r\n}\r\n\r\nApp.prototype = Object.create(Emitter.prototype);\r\n\r\nApp.prototype.send = function(obj) {\r\n    this.mux.send(JSON.stringify(obj));\r\n}\r\nvar i = 0;\r\nApp.prototype.join = function(serverGuid) {\r\n    console.log(\"app.join: \" + serverGuid);\r\n    var _this = this;\r\n    var peer = new Peer({\r\n        key: this.key\r\n    });\r\n    var conn = peer.connect(serverGuid);\r\n    conn.on('open', function() {\r\n        _this.mux.on(\"messageReceived\", function(message) {\r\n            _this.fire('message', JSON.parse(message));\r\n        });\r\n        _this.mux.on('requestSendData', function(data) {\r\n            conn.send(data);\r\n            i++;\r\n            if (i % 10 == 0) {\r\n                console.log(i);\r\n            }\r\n        });\r\n        conn.on('data', function(data) {\r\n            _this.mux.processData(data);\r\n        });\r\n        _this.fire(\"connected\");\r\n    });\r\n    conn.on('close', function() {\r\n        _this.fire(\"disconnected\");\r\n    });\r\n    conn.on('error', function(error) {\r\n        _this.fire(\"error\", error);\r\n    });\r\n};\r\n\r\nApp.prototype.host = function() {\r\n    var _this = this;\r\n    var peer = new Peer(this.guid, {\r\n        key: this.key\r\n    });\r\n    peer.on('connection', function(conn) {\r\n        _this.mux.on(\"messageReceived\", function(message) {\r\n            _this.fire('message', JSON.parse(message));\r\n        });\r\n        _this.mux.on('requestSendData', function(data) {\r\n            conn.send(data);\r\n        });\r\n        conn.on('data', function(data) {\r\n            _this.mux.processData(data);\r\n        });\r\n        conn.on('close', function() {\r\n            _this.fire(\"disconnected\");\r\n        });\r\n        conn.on('error', function(error) {\r\n            _this.fire(\"error\", error);\r\n        });\r\n        _this.fire(\"connected\");\r\n    });\r\n};"]],"start1":0,"start2":0,"length1":0,"length2":3235}]],"length":3235}
